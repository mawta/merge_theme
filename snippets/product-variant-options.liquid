{% comment %}
  Renders product variant options

  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.


  Usage:
  {% render 'product-variant-options',
  product: product,
  option: option,
  block: block
  %}
{% endcomment %}

{%- liquid
  assign variants_available_arr = product.variants | map: 'available'
  assign variants_option1_arr = product.variants | map: 'option1'
  assign variants_option2_arr = product.variants | map: 'option2'
  assign variants_option3_arr = product.variants | map: 'option3'

  assign product_form_id = 'product-form-' | append: section.id
-%}

{%- for value in option.values -%}
  {%- liquid
    assign option_disabled = true

    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
      endcase
    endfor
  -%}

  {% if typeCasePhone == true %}
    <option value="" disabled selected hidden>-- Chọn --</option>
    {% break %}
  {% endif %}
{%- endfor -%}

{%- for value in option.values -%}
  {%- liquid
    assign option_disabled = true

    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
      endcase
    endfor
  -%}

  {% if typeCasePhone == true %}
    <option value="{{ value | escape }}" {% if option_disabled %}disabled{% endif %}>{{ value }}</option>
  {%- elsif block.settings.picker_type == 'button' -%}
    <input
      type="radio"
      id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      name="{{ option.name }}"
      value="{{ value | escape }}"
      form="{{ product_form_id }}"
      {% if option_disabled %}class="disabled" disabled{% endif %}
      required
    >
    <label
      for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      class="swatch-elment {% if option.name == "Color" %}color {% endif %} {{ value | handle }}-swatch"
      {% if option.name == 'Color' %}
        style=" background-color: {% render 'product-color' , color: value %} "
      {% endif %}
    >
      {% if option.name != 'Color' %}
        {{ value }}
        {% render 'product-best-selling', product: product, value: value %}
      {% endif %}
      <span class="visually-hidden">{{ 'products.product.variant_sold_out_or_unavailable' | t }}</span>
      {% if option.name == 'Color' %}
        <div class="tooltip">{{ value }}</div>
      {% endif %}
    </label>
  {%- elsif block.settings.picker_type == 'dropdown' -%}
    <option value="{{ value | escape }}" {% if option_disabled %}disabled{% endif %}>{{ value }}</option>
  {%- endif -%}

  {%- if forloop.last -%}
    <div class="option-required-warning" style="color: red; font-size: 0.9em; display: none; margin-top: 4px;">
      {{ option.name }} is required. Please select an option.
    </div>
  {%- endif -%}
{%- endfor -%}

<script>
  // Đảm bảo không radio nào được checked mặc định khi có thay đổi DOM (observer)
  function uncheckAllRadiosInProductForm() {
    document.querySelectorAll('.product-form__input input[type="radio"]').forEach(function(radio) {
      if (!radio.matches(':checked')) {
        radio.checked = false;
        radio.removeAttribute('checked');
      }
    });
  }
  function observeProductFormRadios() {
    var productFormInputs = document.querySelectorAll('.product-form__input');
    productFormInputs.forEach(function(productForm) {
      const observer = new MutationObserver(() => {
        uncheckAllRadiosInProductForm();
      });
      observer.observe(productForm, { childList: true, subtree: true });
    });
  }
  observeProductFormRadios();
</script>
<script>
(function() {
  function getRequiredRadioGroups() {
    // Lấy tất cả radio required, visible, enabled
    var radios = Array.from(document.querySelectorAll('input[type="radio"][required]')).filter(function(radio) {
      return radio.offsetParent !== null && !radio.disabled;
    });
    // Lấy unique name
    var names = Array.from(new Set(radios.map(function(r){ return r.name; })));
    // Chỉ giữ lại nhóm có ít nhất 1 radio enabled, visible, required
    return names.filter(function(name) {
      var groupRadios = Array.from(document.querySelectorAll('input[type="radio"][name="'+name+'"]'));
      return groupRadios.some(function(radio) {
        return radio.required && radio.offsetParent !== null && !radio.disabled;
      });
    });
  }
  function updateAddToCartBtnState() {
    return;
    var btn = document.querySelector('.customily-add-to-cart-btn');
    if (!btn) {
      return;
    }
    var form = btn.closest('form');
    if (!form) return;
    var requiredGroups = getRequiredRadioGroups();
    var allSelected = true;
    requiredGroups.forEach(function(name) {
      if (!document.querySelector('input[type="radio"][name="'+name+'"]:checked')) allSelected = false;
    });
    // Ẩn cảnh báo từng option
    requiredGroups.forEach(function(name) {
      var radios = document.querySelectorAll('input[type="radio"][name="'+name+'"]');
      var warning = null;
      if (radios.length > 0) {
        var lastRadio = radios[radios.length - 1];
        var next = lastRadio.nextElementSibling;
        while (next && !next.classList.contains('option-required-warning')) {
          next = next.nextElementSibling;
        }
        warning = next;
      }
      if (warning) warning.style.display = 'none';
    });
    btn.removeAttribute('disabled');
    if (!allSelected) {
      btn.classList.add('not-all-selected');
    } else {
      btn.classList.remove('not-all-selected');
    }
  }
  var observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      if (mutation.type === 'childList') {
        updateAddToCartBtnState();
      }
    });
  });
  observer.observe(document.body, { childList: true, subtree: true });
  document.addEventListener('change', function(e) {
    if (e.target.matches('input[type="radio"][required]')) {
      updateAddToCartBtnState();
    }
  });

  // Hiệu ứng rung và cảnh báo khi bấm nếu chưa chọn đủ
  document.addEventListener('click', function(e) {
    var btn = e.target.closest('.customily-add-to-cart-btn');
    if (btn && btn.classList.contains('not-all-selected')) {
      e.preventDefault();
      btn.classList.add('shake');
      setTimeout(function() {
        btn.classList.remove('shake');
      }, 500);
      var globalWarning = document.querySelector('.global-option-warning');
      if (!globalWarning) {
        globalWarning = document.createElement('div');
        globalWarning.className = 'global-option-warning';
        globalWarning.style.cssText = 'color: red; font-size: 1em; margin-bottom: 10px; text-align: center;';
        globalWarning.textContent = 'Please select all required options before adding to cart!';
        var form = btn.closest('form');
        if (form) form.parentNode.insertBefore(globalWarning, form);
      } else {
        globalWarning.style.display = 'block';
      }
      var requiredGroups = getRequiredRadioGroups();
      requiredGroups.forEach(function(name) {
        if (!document.querySelector('input[type="radio"][name="'+name+'"]:checked')) {
          var radios = document.querySelectorAll('input[type="radio"][name="'+name+'"]');
          var warning = null;
          if (radios.length > 0) {
            var lastRadio = radios[radios.length - 1];
            var next = lastRadio.nextElementSibling;
            while (next && !next.classList.contains('option-required-warning')) {
              next = next.nextElementSibling;
            }
            warning = next;
          }
          if (warning) warning.style.display = 'block';
        }
      });
      globalWarning.scrollIntoView({behavior: 'smooth', block: 'center'});
      return false;
    } else if (btn) {
      var globalWarning = document.querySelector('.global-option-warning');
      if (globalWarning) globalWarning.style.display = 'none';
      var optionWarnings = document.querySelectorAll('.option-required-warning');
      optionWarnings.forEach(function(w){ w.style.display = 'none'; });
    }
  }, true);

  // Thêm CSS shake
  var style = document.createElement('style');
  style.innerHTML = `
    .customily-add-to-cart-btn.shake {
      animation: shake 0.5s;
    }
    @keyframes shake {
      0% { transform: translateX(0); }
      20% { transform: translateX(-8px); }
      40% { transform: translateX(8px); }
      60% { transform: translateX(-8px); }
      80% { transform: translateX(8px); }
      100% { transform: translateX(0); }
    }
  `;
  document.head.appendChild(style);

  // Kiểm tra lần đầu
  updateAddToCartBtnState();
})();
</script>