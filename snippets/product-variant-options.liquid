{% comment %}
  Renders product variant options

  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.


  Usage:
  {% render 'product-variant-options',
  product: product,
  option: option,
  block: block
  %}
{% endcomment %}

{%- liquid
  assign variants_available_arr = product.variants | map: 'available'
  assign variants_option1_arr = product.variants | map: 'option1'
  assign variants_option2_arr = product.variants | map: 'option2'
  assign variants_option3_arr = product.variants | map: 'option3'

  assign product_form_id = 'product-form-' | append: section.id
-%}

<script>
  console.log("value", {{option | json}})
</script>
<script>
  console.log({{product | json}})
</script>
<script>
  console.log("variants_available_arr",{{variants_available_arr | json}})
</script>
<script>
  console.log("variants_option1_arr",{{variants_option1_arr | json}})
</script>
<script>
  console.log("variants_option2_arr",{{variants_option2_arr | json}})
</script>
<script>
  console.log("variants_option3_arr",{{variants_option3_arr | json}})
</script>
<script>
  console.log("product.variants",{{product.variants | json}})
</script>

{%- for value in option.values -%}
  {%- liquid
    assign option_disabled = true

    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
      endcase
    endfor
  -%}

  {% if typeCasePhone == true %}
    <option value="" disabled selected hidden>-- Chọn --</option>
    {% break %}
  {% endif %}
{%- endfor -%}

{%- for value in option.values -%}
  {%- liquid
    assign option_disabled = true

    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
      endcase
    endfor
  -%}

  {% if typeCasePhone == true %}
    <option value="{{ value | escape }}" {% if option_disabled %}disabled{% endif %}>{{ value }}</option>
  {%- elsif block.settings.picker_type == 'button' -%}
    <input
      type="radio"
      id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      name="{{ option.name }}"
      value="{{ value | escape }}"
      form="{{ product_form_id }}"
      {% if option_disabled %}class="disabled" disabled{% endif %}
      required
    >
    <label
      for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      class="swatch-elment {% if option.name == "Color" %}color {% endif %} {{ value | handle }}-swatch"
      {% if option.name == 'Color' %}
        style=" background-color: {% render 'product-color' , color: value %} "
      {% endif %}
    >
      {% if option.name != 'Color' %}
        {{ value }}
        {% render 'product-best-selling', product: product, value: value %}
      {% endif %}
      <span class="visually-hidden">{{ 'products.product.variant_sold_out_or_unavailable' | t }}</span>
      {% if option.name == 'Color' %}
        <div class="tooltip">{{ value }}</div>
      {% endif %}
    </label>
  {%- elsif block.settings.picker_type == 'dropdown' -%}
    <option value="{{ value | escape }}" {% if option_disabled %}disabled{% endif %}>{{ value }}</option>
  {%- endif -%}

  {%- if forloop.last -%}
    <!-- <div class="option-required-warning" style="color: red; font-size: 0.9em; display: none; margin-top: 4px;">
      {{ option.name }} is required. Please select an option.
    </div> -->
  {%- endif -%}
{%- endfor -%}

<script>
  // Đảm bảo không radio nào được checked mặc định khi có thay đổi DOM (observer)
  function uncheckAllRadiosInProductForm() {
    document.querySelectorAll('.product-form__input input[type="radio"]').forEach(function(radio) {
      if (!radio.matches(':checked')) {
        radio.checked = false;
        radio.removeAttribute('checked');
      }
    });
  }
  function observeProductFormRadios() {
    var productFormInputs = document.querySelectorAll('.product-form__input');
    productFormInputs.forEach(function(productForm) {
      const observer = new MutationObserver(() => {
        uncheckAllRadiosInProductForm();
      });
      observer.observe(productForm, { childList: true, subtree: true });
    });
  }
  observeProductFormRadios();
</script>
<script>
(function() {
  function updateAddToCartBtnState() {
    var btn = document.querySelector('.customily-add-to-cart-btn');
    var noticeId = 'add-to-cart-options-warning';
    var notice = document.getElementById(noticeId);
    if (!btn) {
      if (notice) notice.style.display = 'none';
      console.log('[observer] Button chưa xuất hiện');
      return;
    }
    console.log('[observer] Button đã xuất hiện');
    var form = btn.closest('form');
    if (!form) return;
    var requiredRadios = document.querySelectorAll('input[type="radio"][required]');
    console.log('[observer] requiredRadios:', requiredRadios);
    var allSelected = true;
    requiredRadios.forEach(function(radio) {
      if (!document.querySelector('input[type="radio"][name="'+radio.name+'"]:checked')) allSelected = false;
    });
    // Show/hide required warning for each option
    requiredRadios.forEach(function(radio) {
      var optionName = radio.name;
      // Find the warning for this option (assume it's the next .option-required-warning after the last input for this name)
      var radios = document.querySelectorAll('input[type="radio"][name="'+optionName+'"]');
      var warning = null;
      if (radios.length > 0) {
        var lastRadio = radios[radios.length - 1];
        var next = lastRadio.nextElementSibling;
        while (next && !next.classList.contains('option-required-warning')) {
          next = next.nextElementSibling;
        }
        warning = next;
      }
      if (!document.querySelector('input[type="radio"][name="'+optionName+'"]:checked')) {
        if (warning) {
          warning.style.display = 'block';
        }
      } else {
        if (warning) {
          warning.style.display = 'none';
        }
      }
    });
    // Add or remove the global warning message
    if (!notice) {
      notice = document.createElement('div');
      notice.id = noticeId;
      notice.style.color = 'red';
      notice.style.fontSize = '0.95em';
      notice.style.marginBottom = '8px';
      notice.style.fontStyle = 'italic';
      notice.style.display = 'none';
      notice.textContent = 'You need to select all options';
      if (btn.parentNode) {
        btn.parentNode.insertBefore(notice, btn);
      }
    }
    if (allSelected) {
      btn.removeAttribute('disabled');
      if (notice) notice.style.display = 'none';
      console.log('[observer] Button enabled');
    } else {
      btn.setAttribute('disabled', 'disabled');
      if (notice) notice.style.display = 'block';
      console.log('[observer] Button disabled');
    }
  }
  var observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      if (mutation.type === 'childList') {
        updateAddToCartBtnState();
      }
    });
  });
  observer.observe(document.body, { childList: true, subtree: true });
  document.addEventListener('change', function(e) {
    if (e.target.matches('input[type="radio"][required]')) {
      updateAddToCartBtnState();
    }
  });
  // Kiểm tra lần đầu
  updateAddToCartBtnState();
})();
</script>