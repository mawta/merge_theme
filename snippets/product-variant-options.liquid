{% comment %}
  Renders product variant options

  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.


  Usage:
  {% render 'product-variant-options',
  product: product,
  option: option,
  block: block
  %}
{% endcomment %}

{%- liquid
  assign variants_available_arr = product.variants | map: 'available'
  assign variants_option1_arr = product.variants | map: 'option1'
  assign variants_option2_arr = product.variants | map: 'option2'
  assign variants_option3_arr = product.variants | map: 'option3'

  assign product_form_id = 'product-form-' | append: section.id
-%}

{%- for value in option.values -%}
  {%- liquid
    assign option_disabled = true

    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
      endcase
    endfor
  -%}

  {% if typeCasePhone == true %}
    <option value="" disabled selected hidden>-- Chọn --</option>
    {% break %}
  {% endif %}
{%- endfor -%}

{%- for value in option.values -%}
  {%- liquid
    assign option_disabled = true

    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
      endcase
    endfor
  -%}

  {% if typeCasePhone == true %}
    <option value="{{ value | escape }}" {% if option_disabled %}disabled{% endif %}>{{ value }}</option>
  {%- elsif block.settings.picker_type == 'button' -%}
    <input
      type="radio"
      id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      name="{{ option.name }}"
      value="{{ value | escape }}"
      form="{{ product_form_id }}"
      {% if option_disabled %}class="disabled" disabled{% endif %}
      required
    >
    <label
      for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      class="swatch-elment {% if option.name == "Color" %}color {% endif %} {{ value | handle }}-swatch"
      {% if option.name == 'Color' %}
        style=" background-color: {% render 'product-color' , color: value %} "
      {% endif %}
    >
      {% if option.name != 'Color' %}
        {{ value }}
        {% render 'product-best-selling', product: product, value: value %}
      {% endif %}
      <span class="visually-hidden">{{ 'products.product.variant_sold_out_or_unavailable' | t }}</span>
      {% if option.name == 'Color' %}
        <div class="tooltip">{{ value }}</div>
      {% endif %}
    </label>
  {%- elsif block.settings.picker_type == 'dropdown' -%}
    <option value="{{ value | escape }}" {% if option_disabled %}disabled{% endif %}>{{ value }}</option>
  {%- endif -%}

  {%- if forloop.last -%}
    <div class="option-required-warning" style="color: red; font-size: 0.9em; display: none; margin-top: 4px;">
      {{ option.name }} is required. Please select an option.
    </div>
  {%- endif -%}
{%- endfor -%}

<script>
  // Đảm bảo không radio nào được checked mặc định khi có thay đổi DOM (observer)
  function uncheckAllRadiosInProductForm() {
    document.querySelectorAll('.product-form__input input[type="radio"]').forEach(function(radio) {
      if (!radio.matches(':checked')) {
        radio.checked = false;
        radio.removeAttribute('checked');
      }
    });
  }
  function observeProductFormRadios() {
    var productFormInputs = document.querySelectorAll('.product-form__input');
    productFormInputs.forEach(function(productForm) {
      const observer = new MutationObserver(() => {
        uncheckAllRadiosInProductForm();
      });
      observer.observe(productForm, { childList: true, subtree: true });
    });
  }
  observeProductFormRadios();
</script>
<script>
  (function() {
    // 1. Xác định các đối tượng cần làm việc
    const productForm = document.querySelector('form[action^="/cart/add"]');
    if (!productForm) return;
  
    const addToCartBtn = productForm.querySelector('.customily-add-to-cart-btn');
    if (!addToCartBtn) return;
  
    // Lấy danh sách các nhóm option bắt buộc (dựa trên thuộc tính 'name')
    const requiredOptionGroups = new Set(
      Array.from(productForm.querySelectorAll('input[type="radio"][required]')).map(radio => radio.name)
    );
  
    // 2. Hàm kiểm tra xem tất cả các option đã được chọn chưa
    function allOptionsSelected() {
      for (const groupName of requiredOptionGroups) {
        if (!productForm.querySelector(`input[type="radio"][name="${groupName}"]:checked`)) {
          return false; // Trả về false ngay khi tìm thấy một nhóm chưa được chọn
        }
      }
      return true; // Tất cả đã được chọn
    }
  
    // 3. Xử lý sự kiện click vào nút "Add to Cart"
    addToCartBtn.addEventListener('click', function(event) {
      // Nếu chưa chọn đủ tất cả các option
      if (!allOptionsSelected()) {
        // **Dòng quan trọng nhất: Ngăn form được submit đi**
        event.preventDefault();
  
        // a. Lắc nút để gây chú ý
        this.classList.add('shake');
        setTimeout(() => this.classList.remove('shake'), 500);
  
        // b. Hiển thị cảnh báo chung
        let globalWarning = productForm.querySelector('.global-option-warning');
        if (!globalWarning) {
          globalWarning = document.createElement('div');
          globalWarning.className = 'global-option-warning';
          globalWarning.style.cssText = 'color: red; font-size: 1em; margin-bottom: 10px; text-align: center;';
          globalWarning.textContent = 'Vui lòng chọn đầy đủ các tùy chọn!';
          productForm.prepend(globalWarning); // Thêm vào đầu form
        }
        globalWarning.style.display = 'block';
        globalWarning.scrollIntoView({ behavior: 'smooth', block: 'center' });
  
        // c. Hiện cảnh báo cho từng option bị thiếu
        requiredOptionGroups.forEach(name => {
          const isSelected = productForm.querySelector(`input[type="radio"][name="${name}"]:checked`);
          // Tìm warning tương ứng với nhóm option này
          const warningEl = productForm.querySelector(`.option-required-warning[data-option-name="${name}"]`);
          if (warningEl) {
            warningEl.style.display = isSelected ? 'none' : 'block';
          }
        });
      } else {
        // Nếu đã chọn đủ, ẩn tất cả các cảnh báo
        productForm.querySelectorAll('.global-option-warning, .option-required-warning').forEach(warning => {
          warning.style.display = 'none';
        });
      }
    });
  
    // 4. Lắng nghe sự kiện 'change' để ẩn cảnh báo khi người dùng chọn một option
    productForm.addEventListener('change', function(event) {
      if (event.target.matches('input[type="radio"][required]')) {
        const groupName = event.target.name;
        const warningEl = productForm.querySelector(`.option-required-warning[data-option-name="${groupName}"]`);
        if (warningEl) {
          warningEl.style.display = 'none';
        }
      }
    });
  
    // 5. Thêm CSS cho hiệu ứng shake (nếu chưa có)
    if (!document.querySelector('#shake-animation-style')) {
      const style = document.createElement('style');
      style.id = 'shake-animation-style';
      style.innerHTML = `
        .customily-add-to-cart-btn.shake {
          animation: shake 0.5s;
        }
        @keyframes shake {
          0%, 100% { transform: translateX(0); }
          20%, 60% { transform: translateX(-8px); }
          40%, 80% { transform: translateX(8px); }
        }`;
      document.head.appendChild(style);
    }
  })();
</script>