{% comment %}
  Renders product variant options

  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.


  Usage:
  {% render 'product-variant-options',
  product: product,
  option: option,
  block: block
  %}
{% endcomment %}

{%- liquid
  assign variants_available_arr = product.variants | map: 'available'
  assign variants_option1_arr = product.variants | map: 'option1'
  assign variants_option2_arr = product.variants | map: 'option2'
  assign variants_option3_arr = product.variants | map: 'option3'

  assign product_form_id = 'product-form-' | append: section.id
-%}

{%- for value in option.values -%}
  {%- liquid
    assign option_disabled = true

    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
      endcase
    endfor
  -%}

  {% if typeCasePhone == true %}
    <option value="" disabled selected hidden>-- Chọn --</option>
    {% break %}
  {% endif %}
{%- endfor -%}

{%- for value in option.values -%}
  {%- liquid
    assign option_disabled = true

    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
      endcase
    endfor
  -%}

  {% if typeCasePhone == true %}
    <option value="{{ value | escape }}" {% if option_disabled %}disabled{% endif %}>{{ value }}</option>
  {%- elsif block.settings.picker_type == 'button' -%}
    <input
      type="radio"
      id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      name="{{ option.name }}"
      value="{{ value | escape }}"
      form="{{ product_form_id }}"
      {% if option_disabled %}class="disabled" disabled{% endif %}
      required
    >
    <label
      for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      class="swatch-elment {% if option.name == "Color" %}color {% endif %} {{ value | handle }}-swatch"
      {% if option.name == 'Color' %}
        style=" background-color: {% render 'product-color' , color: value %} "
      {% endif %}
    >
      {% if option.name != 'Color' %}
        {{ value }}
        {% render 'product-best-selling', product: product, value: value %}
      {% endif %}
      <span class="visually-hidden">{{ 'products.product.variant_sold_out_or_unavailable' | t }}</span>
      {% if option.name == 'Color' %}
        <div class="tooltip">{{ value }}</div>
      {% endif %}
    </label>
  {%- elsif block.settings.picker_type == 'dropdown' -%}
    <option value="{{ value | escape }}" {% if option_disabled %}disabled{% endif %}>{{ value }}</option>
  {%- endif -%}

  {%- if forloop.last -%}
    <div class="option-required-warning" style="color: red; font-size: 0.9em; display: none; margin-top: 4px;">
      {{ option.name }} is required. Please select an option.
    </div>
  {%- endif -%}
{%- endfor -%}

<script>
  // Đảm bảo không radio nào được checked mặc định khi có thay đổi DOM (observer)
  function uncheckAllRadiosInProductForm() {
    document.querySelectorAll('.product-form__input input[type="radio"]').forEach(function(radio) {
      if (!radio.matches(':checked')) {
        radio.checked = false;
        radio.removeAttribute('checked');
      }
    });
  }
  function observeProductFormRadios() {
    var productFormInputs = document.querySelectorAll('.product-form__input');
    productFormInputs.forEach(function(productForm) {
      const observer = new MutationObserver(() => {
        uncheckAllRadiosInProductForm();
      });
      observer.observe(productForm, { childList: true, subtree: true });
    });
  }
  observeProductFormRadios();
</script>
<script>
  (function() {
    const form = document.getElementById('{{ product_form_id }}');
    if (!form) return;
  
    const btn = form.querySelector('.customily-add-to-cart-btn');
    if (!btn) return;
  
    const requiredRadioGroups = new Set(
      Array.from(form.querySelectorAll('input[type="radio"][required]')).map(radio => radio.name)
    );
  
    function updateAddToCartBtnState() {
      let allSelected = true;
      requiredRadioGroups.forEach(name => {
        if (!form.querySelector(`input[type="radio"][name="${name}"]:checked`)) {
          allSelected = false;
        }
      });
  
      if (allSelected) {
        btn.classList.remove('not-all-selected');
        // Ẩn cảnh báo chung nếu có
        const globalWarning = form.parentNode.querySelector('.global-option-warning');
        if (globalWarning) globalWarning.style.display = 'none';
      } else {
        btn.classList.add('not-all-selected');
      }
    }
  
    // Xử lý sự kiện click vào nút Add to Cart
    btn.addEventListener('click', function(e) {
      if (!this.classList.contains('not-all-selected')) {
        return; // Nếu đã chọn đủ, cho phép form submit
      }
  
      e.preventDefault(); // Ngăn form submit
  
      // Lắc nút để tạo hiệu ứng
      this.classList.add('shake');
      setTimeout(() => this.classList.remove('shake'), 500);
  
      // Hiển thị cảnh báo chung
      let globalWarning = form.parentNode.querySelector('.global-option-warning');
      if (!globalWarning) {
        globalWarning = document.createElement('div');
        globalWarning.className = 'global-option-warning';
        globalWarning.style.cssText = 'color: red; font-size: 1em; margin-bottom: 10px; text-align: center;';
        globalWarning.textContent = 'Vui lòng chọn tất cả các tùy chọn bắt buộc!';
        form.parentNode.insertBefore(globalWarning, form);
      }
      globalWarning.style.display = 'block';
      globalWarning.scrollIntoView({ behavior: 'smooth', block: 'center' });
  
      // Hiển thị cảnh báo cho từng tùy chọn bị thiếu
      requiredRadioGroups.forEach(name => {
        const isSelected = form.querySelector(`input[type="radio"][name="${name}"]:checked`);
        const firstRadioOfGroup = form.querySelector(`input[type="radio"][name="${name}"]`);
        // Lấy id của thông báo lỗi từ aria-describedby
        const warningId = firstRadioOfGroup.getAttribute('aria-describedby');
        if (warningId) {
          const warningEl = document.getElementById(warningId);
          if (warningEl) {
            warningEl.style.display = isSelected ? 'none' : 'block';
          }
        }
      });
    });
  
    // Theo dõi thay đổi trong form để cập nhật trạng thái nút
    form.addEventListener('change', (e) => {
      if (e.target.matches('input[type="radio"][required]')) {
        updateAddToCartBtnState();
      }
    });
  
    // Thêm CSS cho hiệu ứng shake
    const style = document.createElement('style');
    style.innerHTML = `
      .customily-add-to-cart-btn.shake {
        animation: shake 0.5s;
      }
      @keyframes shake {
        0%, 100% { transform: translateX(0); }
        20%, 60% { transform: translateX(-8px); }
        40%, 80% { transform: translateX(8px); }
      }`;
    document.head.appendChild(style);
  
    // Chạy kiểm tra lần đầu khi tải trang
    updateAddToCartBtnState();
  })();
</script>