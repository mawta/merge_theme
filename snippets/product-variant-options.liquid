{% comment %}
  Renders product variant options

  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.


  Usage:
  {% render 'product-variant-options',
  product: product,
  option: option,
  block: block
  %}
{% endcomment %}

{%- liquid
  assign variants_available_arr = product.variants | map: 'available'
  assign variants_option1_arr = product.variants | map: 'option1'
  assign variants_option2_arr = product.variants | map: 'option2'
  assign variants_option3_arr = product.variants | map: 'option3'

  assign product_form_id = 'product-form-' | append: section.id
-%}

{%- for value in option.values -%}
  {%- liquid
    assign option_disabled = true

    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
      endcase
    endfor
  -%}

  {% if typeCasePhone == true %}
    <option value="" disabled selected hidden>-- Chọn --</option>
    {% break %}
  {% endif %}
{%- endfor -%}

{%- for value in option.values -%}
  {%- liquid
    assign option_disabled = true

    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
      endcase
    endfor
  -%}

  {% if typeCasePhone == true %}
    <option value="{{ value | escape }}" {% if option_disabled %}disabled{% endif %}>{{ value }}</option>
  {%- elsif block.settings.picker_type == 'button' -%}
    <input
      type="radio"
      id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      name="{{ option.name }}"
      value="{{ value | escape }}"
      form="{{ product_form_id }}"
      {% if option_disabled %}class="disabled" disabled{% endif %}
      required
    >
    <label
      for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      class="swatch-elment {% if option.name == "Color" %}color {% endif %} {{ value | handle }}-swatch"
      {% if option.name == 'Color' %}
        style=" background-color: {% render 'product-color' , color: value %} "
      {% endif %}
    >
      {% if option.name != 'Color' %}
        {{ value }}
        {% render 'product-best-selling', product: product, value: value %}
      {% endif %}
      <span class="visually-hidden">{{ 'products.product.variant_sold_out_or_unavailable' | t }}</span>
      {% if option.name == 'Color' %}
        <div class="tooltip">{{ value }}</div>
      {% endif %}
    </label>
  {%- elsif block.settings.picker_type == 'dropdown' -%}
    <option value="{{ value | escape }}" {% if option_disabled %}disabled{% endif %}>{{ value }}</option>
  {%- endif -%}

  {%- if forloop.last -%}
    <div class="option-required-warning" style="color: red; font-size: 0.9em; display: none; margin-top: 4px;">
      {{ option.name }} is required. Please select an option.
    </div>
  {%- endif -%}
{%- endfor -%}

<script>
  // Đảm bảo không radio nào được checked mặc định khi có thay đổi DOM (observer)
  function uncheckAllRadiosInProductForm() {
    document.querySelectorAll('.product-form__input input[type="radio"]').forEach(function(radio) {
      if (!radio.matches(':checked')) {
        radio.checked = false;
        radio.removeAttribute('checked');
      }
    });
  }
  function observeProductFormRadios() {
    var productFormInputs = document.querySelectorAll('.product-form__input');
    productFormInputs.forEach(function(productForm) {
      const observer = new MutationObserver(() => {
        uncheckAllRadiosInProductForm();
      });
      observer.observe(productForm, { childList: true, subtree: true });
    });
  }
  observeProductFormRadios();
</script>
<script>
  (function() {
    // 1. Xác định form và lấy ID của nó
    const productForm = document.querySelector('form[action^="/cart/add"]');
    if (!productForm) {
      console.error("Product form not found.");
      return;
    }
    const formId = productForm.id;
    if (!formId) {
      console.error("Product form needs an ID for this script to work.");
      return;
    }
  
    // 2. Xác định nút Add to Cart (vẫn nằm trong form)
    const addToCartBtn = document.querySelector('.customily-add-to-cart-btn');
    if (!addToCartBtn) {
      console.error("Add to cart button not found.");
      return;
    }
  
    // 3. Lấy tất cả các input radio BẮT BUỘC thuộc về form này (dù nó nằm ở đâu)
    const requiredInputs = document.querySelectorAll(`input[type="radio"][required][form="${formId}"]`);
    
    // Lấy danh sách tên các nhóm option
    const requiredOptionGroups = new Set(
      Array.from(requiredInputs).map(radio => radio.name)
    );
  
    // 4. Hàm kiểm tra tất cả option đã được chọn chưa
    function allOptionsSelected() {
      // Dùng for...of để có thể thoát sớm
      for (const groupName of requiredOptionGroups) {
        // Tìm input đã được check thuộc về form này
        if (!document.querySelector(`input[type="radio"][name="${groupName}"][form="${formId}"]:checked`)) {
          return false; // Tìm thấy một nhóm chưa chọn -> trả về false ngay
        }
      }
      return true; // Nếu vòng lặp hoàn tất -> tất cả đã được chọn
    }
  
    // 5. Xử lý sự kiện click vào nút "Add to Cart"
    addToCartBtn.addEventListener('click', function(event) {
      if (allOptionsSelected()) {
        // Nếu đã chọn đủ, ẩn mọi cảnh báo và để form submit
        productForm.querySelectorAll('.global-option-warning').forEach(w => w.style.display = 'none');
        document.querySelectorAll(`fieldset .option-required-warning`).forEach(w => w.style.display = 'none');
        return;
      }
  
      // Nếu chưa chọn đủ:
      // **Dòng quan trọng nhất: Ngăn form submit**
      event.preventDefault();
  
      // a. Lắc nút
      this.classList.add('shake');
      setTimeout(() => this.classList.remove('shake'), 500);
  
      // b. Hiển thị cảnh báo chung (thêm vào đầu form)
      let globalWarning = productForm.querySelector('.global-option-warning');
      if (!globalWarning) {
        globalWarning = document.createElement('div');
        globalWarning.className = 'global-option-warning';
        globalWarning.style.cssText = 'color: red; font-size: 1em; margin-bottom: 10px; text-align: center;';
        globalWarning.textContent = 'Vui lòng chọn đầy đủ các tùy chọn!';
        productForm.prepend(globalWarning);
      }
      globalWarning.style.display = 'block';
      globalWarning.scrollIntoView({ behavior: 'smooth', block: 'center' });
  
      // c. Hiện cảnh báo cho từng option bị thiếu
      requiredOptionGroups.forEach(name => {
        const isSelected = document.querySelector(`input[type="radio"][name="${name}"][form="${formId}"]:checked`);
        // Tìm fieldset chứa nhóm option này
        const inputForGroup = document.querySelector(`input[type="radio"][name="${name}"][form="${formId}"]`);
        if (inputForGroup) {
          const fieldset = inputForGroup.closest('fieldset');
          if (fieldset) {
            const warningEl = fieldset.querySelector('.option-required-warning');
            if (warningEl) {
              warningEl.style.display = isSelected ? 'none' : 'block';
            }
          }
        }
      });
    });
  
    // 6. Lắng nghe sự kiện 'change' trên toàn bộ document
    document.addEventListener('change', function(event) {
      // Kiểm tra xem phần tử được thay đổi có phải là input của chúng ta không
      if (event.target.matches(`input[type="radio"][required][form="${formId}"]`)) {
          const fieldset = event.target.closest('fieldset');
          if (fieldset) {
              const warningEl = fieldset.querySelector('.option-required-warning');
              if (warningEl) {
                  warningEl.style.display = 'none'; // Ẩn cảnh báo khi người dùng đã chọn
              }
          }
      }
    });
  
    // 7. Thêm CSS cho hiệu ứng shake
    if (!document.querySelector('#shake-animation-style')) {
      const style = document.createElement('style');
      style.id = 'shake-animation-style';
      style.innerHTML = `
        .customily-add-to-cart-btn.shake {
          animation: shake 0.5s;
        }
        @keyframes shake {
          0%, 100% { transform: translateX(0); }
          20%, 60% { transform: translateX(-8px); }
          40%, 80% { transform: translateX(8px); }
        }`;
      document.head.appendChild(style);
    }
  
  })();
</script>