{% comment %}
  Renders product variant options

  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.


  Usage:
  {% render 'product-variant-options',
  product: product,
  option: option,
  block: block
  %}
{% endcomment %}

{%- liquid
  assign variants_available_arr = product.variants | map: 'available'
  assign variants_option1_arr = product.variants | map: 'option1'
  assign variants_option2_arr = product.variants | map: 'option2'
  assign variants_option3_arr = product.variants | map: 'option3'

  assign product_form_id = 'product-form-' | append: section.id
-%}

<script>
  console.log("value", {{option | json}})
</script>
<script>
  console.log({{product | json}})
</script>
<script>
  console.log("variants_available_arr",{{variants_available_arr | json}})
</script>
<script>
  console.log("variants_option1_arr",{{variants_option1_arr | json}})
</script>
<script>
  console.log("variants_option2_arr",{{variants_option2_arr | json}})
</script>
<script>
  console.log("variants_option3_arr",{{variants_option3_arr | json}})
</script>
<script>
  console.log("product.variants",{{product.variants | json}})
</script>

{%- for value in option.values -%}
  {%- liquid
    assign option_disabled = true

    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
      endcase
    endfor
  -%}

  {% if typeCasePhone == true %}
    <option value="{{ value | escape }}">
      {% if option_disabled -%}
        {{- 'products.product.value_unavailable' | t: option_value: value -}}
      {%- else -%}
        {{- value -}}
      {%- endif %}
    </option>
  {%- elsif block.settings.picker_type == 'button' -%}
    <input
      type="radio"
      id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      name="{{ option.name }}"
      value="{{ value | escape }}"
      form="{{ product_form_id }}"
      {% if option_disabled %}
        class="disabled"
      {% endif %}
      required
    >
    <label
      for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      class="swatch-elment {% if option.name == "Color" %}color {% endif %} {{ value | handle }}-swatch"
      {% if option.name == 'Color' %}
        style=" background-color: {% render 'product-color' , color: value %} "
      {% endif %}
    >
      {% if option.name != 'Color' %}
        {{ value }}
        {% render 'product-best-selling', product: product, value: value %}
      {% endif %}

      <span class="visually-hidden">{{ 'products.product.variant_sold_out_or_unavailable' | t }}</span>
      {% if option.name == 'Color' %}
        <div class="tooltip">{{ value }}</div>
      {% endif %}
    </label>

  {%- elsif block.settings.picker_type == 'dropdown' -%}
    <option value="{{ value | escape }}" {% if forloop.first %}required{% endif %}>
      {% if option_disabled -%}
        {{- 'products.product.value_unavailable' | t: option_value: value -}}
      {%- else -%}
        {{- value -}}
      {%- endif %}
    </option>
  {%- endif -%}
{%- endfor -%}

<script>
  // Đảm bảo script chỉ chạy sau khi DOM đã sẵn sàng
  document.addEventListener('DOMContentLoaded', function() {
    function checkAllOptionsSelected() {
      var allGroups = document.querySelectorAll('[name^="options"][required], .product__radio-group[required], .product__option[required]');
      var allSelected = true;
      // Kiểm tra radio
      document.querySelectorAll('.product__radio-group[required], [name^="options"][required]').forEach(function(group) {
        var radios = group.querySelectorAll('input[type="radio"]');
        if (radios.length) {
          var checked = Array.from(radios).some(function(radio) { return radio.checked; });
          if (!checked) allSelected = false;
        }
      });
      // Kiểm tra select
      document.querySelectorAll('select[required]').forEach(function(select) {
        if (!select.value) allSelected = false;
      });
      // Nếu không có nhóm nào thì vẫn cho add
      return allGroups.length === 0 || allSelected;
    }

    function toggleAddToCartButton() {
      var btn = document.querySelector('.customily-add-to-cart-btn');
      if (!btn) return;
      if (checkAllOptionsSelected()) {
        btn.removeAttribute('disabled');
      } else {
        btn.setAttribute('disabled', 'disabled');
      }
    }

    // Lắng nghe thay đổi trên radio/select
    document.addEventListener('change', function(e) {
      if (
        e.target.matches('input[type="radio"], select') &&
        (e.target.hasAttribute('required') || e.target.closest('.product__radio-group[required]'))
      ) {
        toggleAddToCartButton();
      }
    });
    // Kiểm tra lần đầu
    toggleAddToCartButton();
  });
</script>
